AWSTemplateFormatVersion: "2010-09-09"
Description: "An example template with an IAM role for a Lambda state machine."


Parameters:
  Stage:
    Type: String
    Description: Prod, Dev, etc.

#
# CloudFormation resources
#
Resources:
  #
  # Role that our Lambda will assume to provide access to other AWS resources
  #
  TaseGetInfoLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: '/'

  #
  # Create a Policy and attach it to our Lambda Role.
  #
  IamPolicyLambdaExecution:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-IamPolicyLambdaExecution'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - xray:PutTraceSegments
          Resource: '*'
        - Effect: Allow
          Action:
            - firehose:*
            - firehose:DeleteDeliveryStream
            - firehose:PutRecord
            - firehose:PutRecordBatch
            - firehose:UpdateDestination
            - firehose:CreateDeliveryStream
          Resource: '*' #!GetAtt StocksDeliveryStream.Arn
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: arn:aws:s3:::eetay-stocks/*
      Roles:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:BatchWriteItem
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Stocks'
      Roles:
        - Ref: TaseGetInfoLambdaExecutionRole

  TaseGetInfoLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Sub '${AWS::StackName}-TaseGetInfoLambda'
      Handler: "index.handler"
      Role: 
        Fn::GetAtt: 
          - "TaseGetInfoLambdaExecutionRole"
          - "Arn"
      Code: 
        ZipFile: |
          exports.handler = (event, context, callback) => {
              callback(null, "Hello World!");
          };
      Runtime: "nodejs8.10"
      Timeout: 80
      TracingConfig:
        Mode: "Active"
      Environment:
        Variables:
          STOCKS_BUCKET: eetay-stocks
          STOCKS_TABLE: !Sub '${Stage}Stocks'
          STOCKS_DELIVERY_STREAM_NAME: !Ref StocksDeliveryStream
          POSTGRE_CONN: postgres://root:rootroot@eetaydb.cdwpbt9htoxm.us-east-2.rds.amazonaws.com/Stocks
  
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: !Sub "ScheduleRule for ${AWS::StackName}-TaseGetInfoLambda"
      ScheduleExpression: "cron(0 17 ? * SUN-THU *)" # 19:00 Isral work days
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "TaseGetInfoLambda"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "TaseGetInfoLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"

  #
  # Firehose StocksDelivery
  #
  StocksDeliveryStream:
    DependsOn:
      - StocksDeliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${AWS::StackName}-StocksDeliveryStream'
      ExtendedS3DestinationConfiguration:
        BucketARN: arn:aws:s3:::eetay-stocks
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '1'
        CompressionFormat: UNCOMPRESSED
        Prefix: stocks-delivery-stream/
        RoleARN: !GetAtt StocksDeliveryRole.Arn
        ProcessingConfiguration:
          Enabled: 'false'

  StocksDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  StocksDeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-IamPolicyStocksDelivery'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - arn:aws:s3:::eetay-stocks
              - arn:aws:s3:::eetay-stocks*
      Roles:
        - !Ref StocksDeliveryRole

